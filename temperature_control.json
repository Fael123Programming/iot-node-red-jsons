[
    {
        "id": "d8c0709af38d95d6",
        "type": "tab",
        "label": "Temperature Control through Opening/Closing of Window",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "b8a6fa904e9345da",
        "type": "influxdb in",
        "z": "d8c0709af38d95d6",
        "influxdb": "954d1570b3f4752e",
        "name": "Influxdb Query Mean Temperature",
        "query": "from (bucket: \"iot_ipb\")\n    |>range(start: -1h)\n    |>filter(fn: (r) => r[\"_field\"] == \"temperature\")\n    |>mean()\n    |>duplicate(column: \"_value\", as: \"meanTemp\")\n    |>keep(columns: [\"meanTemp\"])",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "IPB",
        "x": 340,
        "y": 80,
        "wires": [
            [
                "2c3594a4e6b3753b"
            ]
        ]
    },
    {
        "id": "7d14ffd5742ef6fe",
        "type": "inject",
        "z": "d8c0709af38d95d6",
        "name": "Fetch",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3600",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 80,
        "wires": [
            [
                "b8a6fa904e9345da"
            ]
        ]
    },
    {
        "id": "2c3594a4e6b3753b",
        "type": "function",
        "z": "d8c0709af38d95d6",
        "name": "Convert to fixed number",
        "func": "msg.payload = Number(msg.payload[0]['meanTemp']).toFixed(2);\nglobal.set(\"currentMeanTemp\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 80,
        "wires": [
            [
                "b17b84c257d2f55b",
                "7bf51fb03d346545",
                "6dc6f87c4844587e"
            ]
        ]
    },
    {
        "id": "695911f1a2572087",
        "type": "debug",
        "z": "d8c0709af38d95d6",
        "name": "Current mean temperature",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 960,
        "y": 20,
        "wires": []
    },
    {
        "id": "b17b84c257d2f55b",
        "type": "ui_text",
        "z": "d8c0709af38d95d6",
        "group": "5d989dc8f45c4eea",
        "order": 0,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Current mean temperature",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 960,
        "y": 120,
        "wires": []
    },
    {
        "id": "7bf51fb03d346545",
        "type": "ui_numeric",
        "z": "d8c0709af38d95d6",
        "name": "",
        "label": "Mean temperature",
        "tooltip": "Enter desired mean temperature",
        "group": "5d989dc8f45c4eea",
        "order": 1,
        "width": 0,
        "height": 0,
        "wrap": false,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "step": ".5",
        "className": "",
        "x": 110,
        "y": 160,
        "wires": [
            [
                "f5b1e55615536119"
            ]
        ]
    },
    {
        "id": "7c5da1660d8154cd",
        "type": "ui_text",
        "z": "d8c0709af38d95d6",
        "group": "5d989dc8f45c4eea",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Window state",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 640,
        "y": 160,
        "wires": []
    },
    {
        "id": "f5b1e55615536119",
        "type": "function",
        "z": "d8c0709af38d95d6",
        "name": "Configure window state",
        "func": "let desiredMeanTemp = Number(msg.payload);\nlet currentMeanTemp = Number(global.get('currentMeanTemp'));\nlet windowState = 'CLOSED';\nif (desiredMeanTemp < currentMeanTemp) {\n    windowState = 'OPEN';\n}\nmsg.payload = windowState;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 160,
        "wires": [
            [
                "7c5da1660d8154cd",
                "f49e3879e118a033",
                "4ff655938b11cbfb"
            ]
        ]
    },
    {
        "id": "f49e3879e118a033",
        "type": "mqtt out",
        "z": "d8c0709af38d95d6",
        "name": "Window state broker",
        "topic": "what/a/great/day",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "5f4fbc56ede6dfcb",
        "x": 660,
        "y": 280,
        "wires": []
    },
    {
        "id": "6dc6f87c4844587e",
        "type": "function",
        "z": "d8c0709af38d95d6",
        "name": "Format message",
        "func": "msg.payload = `Current mean temperature: ${global.get(\"currentMeanTemp\")} Â°C`;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 20,
        "wires": [
            [
                "695911f1a2572087"
            ]
        ]
    },
    {
        "id": "b2d7cd94b561be6e",
        "type": "debug",
        "z": "d8c0709af38d95d6",
        "name": "Window state",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 900,
        "y": 220,
        "wires": []
    },
    {
        "id": "4ff655938b11cbfb",
        "type": "function",
        "z": "d8c0709af38d95d6",
        "name": "Format message",
        "func": "msg.payload = `Window state: ${msg.payload}`;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 220,
        "wires": [
            [
                "b2d7cd94b561be6e"
            ]
        ]
    },
    {
        "id": "954d1570b3f4752e",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "database",
        "name": "InfluxDB Local",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "2.0",
        "url": "http://localhost:8086",
        "rejectUnauthorized": true
    },
    {
        "id": "5d989dc8f45c4eea",
        "type": "ui_group",
        "name": "Temperature Control",
        "tab": "9d6af6d821e3e4ab",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "5f4fbc56ede6dfcb",
        "type": "mqtt-broker",
        "name": "MQTT Broker Dashboard",
        "broker": "broker.mqtt-dashboard.com",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "9d6af6d821e3e4ab",
        "type": "ui_tab",
        "name": "Temperature Control",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    }
]